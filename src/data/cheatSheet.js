const cheatSheet ={
    Navigation:[
        { command : 'pwd', text: 'Print current location'},
        { command : 'cd dir1', text: 'Change directory to dir1'},
        { command : 'cd .. ', text: 'Go on step backwards '},
        { command : 'cd ../.. ', text: 'Go two steps backwards '},
        { command : 'cd - ', text: 'Go back to the last location '},
        { command : 'cd ~username ', text: 'Go to username’s home folder '},
        { command : 'cd ', text: 'Go to the current user home folder '},
    ],
    FilesAndFolders:[
        { command : 'mkdir dir1 ', text: 'Create a folder called dir1    '},
        { command : 'mkdir .dir1 ', text: 'Create a hidden folder called dir1 '},
        { command : 'mkdir dir1 dir2 ', text: 'Create two directories dir1 dir2 '},
        { command : 'mkdir -p dir1/dir2 ', text: 'Create dir2 including dir1 '},
        { command : 'touch file1 ', text: 'Create an empty file called file1 or update the last modification time '},
        { command : 'touch .file1 ', text: 'Create a hidden empty file called file1 or update the last modification time '},
        { command : 'rm file1 ', text: 'Delete file1 '},
        { command : 'rm file1 file2 ', text: 'Delete file1 and file2 '},
        { command : 'rm -r dir1 ', text: 'Delete dir1 '},
        { command : 'rm -r dir1 file1 ', text: 'Delete dir1 and file1 '},
        { command : 'cp file1 dir1 ', text: 'Copy file1 into dir1 '},
        { command : 'cp file1 file2 dir1 ', text: 'Copy file1 and file2 into dir1 '},
        { command : 'cp -r dir1 dir2 ', text: 'Copy dir1 into dir2 '},
        { command : 'mv file1 dir1 ', text: 'Move file1 into dir1. If dir1 doesn’t exist, file1 will be renamed to dir1 '},
        { command : 'cat file1 ', text: 'View the content of file1 '},
        { command : 'cat file1 file2 ', text: 'View the content of file1 and file2 '},
        { command : 'cat -n file1 ', text: 'View the content of file1 with line numbers '},
    ],
    Wildcards:[
        { command : '* ', text: 'Any character any number of times '},
        { command : '? ', text: 'Any character but only one time '},
        { command : '{1,4,7} ', text: '1 and 4 and 7 '},
        { command : '{3..10} ', text: 'Create range from 3 to 10 '},
    ],
    List:[
        { command : 'ls', text: 'List the content of current directory'},
        { command : 'ls dir1 ', text: 'List the content of dir1 '},
        { command : 'ls dir1 dir2', text: 'List the content of dir1 and dir2 '},
        { command : 'ls -l ', text: 'List content with long format '},
        { command : 'ls -la ', text: 'List content with long format including hidden files/directories '},
        { command : 'ls -lha ', text: 'List content with long format including hidden files/directories and show size in human format '},
        { command : 'ls -lhS ', text: 'List content with long format, show size in human format and sort by size '},
        { command : 'ls -lhSr ', text: 'List content with long format, show size in human format and sort by size in reverse order '},
    ],
    nano:{
        Files:[
            { command : 'Ctrl-R ', text: 'Read file '},
            { command : 'Ctrl-O ', text: 'Save file '},
            { command : 'Ctrl-X ', text: 'Close file '},
        ],
        CutAndPaste:[
            { command : 'ALT-A', text: 'Start marking text'},
            { command : 'CTRL-K ', text: 'Cut marked text or line '},
            { command : 'CTRL-U ', text: 'Paste text '},
        ],
        NavigateFile:[
            { command : 'ALT-/ ', text: 'End of file '},
            { command : 'CTRL-A ', text: 'Beginning of line '},
            { command : 'CTRL-E ', text: 'End of line '},
            { command : 'CTRL-C', text: 'Show line number '},
            { command : 'CTRL-_', text: 'Go to line number'},
        ],
        Find:[
            { command : 'CTRL-W ', text: 'Find '},
            { command : 'ALT-W ', text: 'Find next '},
            { command : 'CTRL-\ ', text: 'Search and replace '},
        ]
    }, 

    Streams:[
        { command : 'Command > file ', text: 'Redirect command’s stdout into file (default is 1). If file doesn’t exist, it will be created on the fly '},
        { command : 'Command >> file ', text: 'Append command’s stdout into file. If file doesn’t exist, it will be created '},
        { command : 'Command 2> file ', text: 'Redirect command’s stderr into file. If file doesn’t exist, it will be created. '},
        { command : 'Command < file ', text: 'Redirect file as stdin (input) to command (default is 0). '},
        { command : 'Command > file 2>&1 ', text: 'Redirect command’s stdout and stderr into file. '},
        { command : 'Command1 | Command2 ', text: 'Redirect the output of Command1 to be the input of Command2 '},
        { command : 'Command1 , Command2 ', text: 'run both Command1 and Command2 sequentialy '},
        { command : 'Command1 && Command2 ', text: 'Execute command 1 and only if executed successfully execute command2 '},
        { command : 'Command1 || Command2 ', text: 'Try to קxecute command1 and only if it is NOT executed run command2'},
   
    ],
    Compression:[
        { command : 'gzip file1 ', text: ' Compress file1 - gz format'},
        { command : 'gzip file1 file2 ', text: 'Compress file1 and file2 - gz format '},
        { command : 'gzip -r dir1 ', text: 'Compress all the file in dir1 - gz format '},
        { command : 'gunzip file1.gz ', text: 'Decompress file1.gz '},
        { command : 'gunzip file1.gz file2.gz ', text: 'Decompress file1.gz and file2.gz '},
        { command : 'bzip2 file1 ', text: 'Compress file1 - bz2 format '},
        { command : 'bzip2 file1 file2 ', text: 'Compress file1 and file2 - bz2 format '},
        { command : 'bunzip2 file1.bz2 ', text: 'Decompress file1.bz2 '},
        { command : 'bunzip2 file1.bz2 file2.bz2 ', text: 'Decompress file1.bz2 and file2.bz2 '},
        { command : 'zip file1.zip file1 ', text: 'Compress file1 to file1.zip '},
        { command : 'unzip file1.zip ', text: 'Decompress file1.zip '},
        { command : 'zip -r file.zip dir/ ', text: ' Compress dir recursively to file.zip'},
        { command : 'unzip -l file.zip ', text: 'list the content of file.zip without Decompressing the file '},
        { command : 'unzip file.zip ', text: 'Decompress file.zip '},
        { command : 'unzip file.zip -d dir1/ ', text: 'Decompress file.zip into dir1 '},
        { command : 'tar cf file.tar file1 file2 ', text: 'Archive file1 and file2 - the output file is a tarball called file.tar '},
        { command : 'tar cf file.tar dir1/ ', text: 'Archive dir1 '},
        { command : 'tar xf file.tar ', text: 'Extract file.tar '},
    ],
    Permissions:{
        Symbols:[
            { command : 'u ', text: 'The user who owns the object '},
            { command : 'g ', text: 'The group which owns the object '},
            { command : 'o ', text: 'Neither the user nor the group '},
            { command : 'a ', text: 'All - user, group and the others (ugo) '},
            { command : 'r ', text: 'Read permission '},
            { command : 'w ', text: 'Write permission '},
            { command : 'x ', text: 'Execute permission '},
            { command : '+ / - / = ', text: 'Add, remove or set permission(s) '},

        ],
        OctalNumbers:[
            { command : '--- ', text: '0 '},
            { command : '--x ', text: '1'},
            { command : '-w- ', text: '2 '},
            { command : '-wx ', text: '3 '},
            { command : 'r-- ', text: '4 '},
            { command : 'r-x ', text: '5 '},
            { command : 'rw- ', text: '6 '},
            { command : 'rwx ', text: '7 '},
        ],
        Commands:[
            { command : 'chmod u+x file1 ', text: 'Add the execution permission for the owner on file named file1 (or directory) '},
            { command : 'chmod g-w file1 ', text: 'Remove the write permission for the group from file named file1 (or directory) '},
            { command : 'chmod o=r file1 ', text: 'Set the permissions to read-only for the other on file named file1 (or directory) '},
            { command : 'chmod 777 file1 ', text: 'Set full permissions for all on file named file1 (or directory) '},
            { command : 'chmod 764 file1 ', text: 'Set full permissions for the owner, read and write for the group and read only for the others '},
            { command : 'chmod +t dir1 ', text: 'Add the sticky bit permission on dir1 '},
            { command : 'chmod u+s file1 ', text: 'Set the suid permission on file1 (not relevant for directories) '},
            { command : 'chmod g+s dir1 ', text: 'Set the guid permission on dir1 '},
            { command : 'chown user1:user1 file1 ', text: 'Change the user and/or group ownership of file1 to user1 and group user1 '},
        ],
        Special:[
            { command : 'user + s ', text: 'SUID: A file with SUID always executes as the user who owns the file, regardless of the user passing the command '},
            { command : 'group + s ', text: 'SGID: If set on a file, it allows the file to be executed as the group that owns the file (similar to SUID). If set on a directory, any files created in the directory will have their group ownership set to that of the directory owner '},
            { command : 'other + t ', text: 'sticky bit: Only the owner (and root) of a file can remove the file within that directory.'},
        ]
    },
    Echo:[
        { command : 'echo “string” ', text: 'Echo the stdin “string” to stdout '},
        { command : 'echo $var1 ', text: 'Echo the value of var1 to stdout '},
        { command : 'echo {1..10} ', text: 'Echo the range 1..10 to stdout '},
        { command : 'echo {A..Z} ', text: 'Echo the range A..Z to stdout '},
        { command : 'echo $((3*4)) ', text: 'Arithmetic Expression - echo the result to stdout '},
    ],
    UsersAndGroups:[
        { command : 'adduser user1 ', text: 'Add a new user called user1 (this also creates a new group named user1) '},
        { command : 'adduser user1 --gid 1005 ', text: 'Add a new user called user1 and add him only to group 1005 (gid) '},
        { command : 'adduser user1 --no-create-home ', text: 'Add a new user called user1 without home folder '},
        { command : 'adduser user1 --shell /bin/sh ', text: 'Add a new user called user1 and set his login shell to /bin/sh '},
        { command : 'adduser user1 group1 ', text: 'Add user1 to group1 (user1 and group1 must be existed) '},
        { command : 'deluser user1 ', text: 'Remove user user1 '},
        { command : 'addgroup group1 ', text: 'Add a new group named group1 '},
        { command : 'delgroup group1 ', text: 'Remove group group1 '},
        { command : 'usermod -aG group1 user1 ', text: 'Add user user1 to group1 '},
        { command : 'usermod --shell /bin/sh user1 ', text: 'Change user1’s login shell to /bin/sh '},
        { command : 'usermod -d /home/user1-home user1 ', text: 'Change user1’s home folder to /home/user1-home '},
        { command : 'usermod -dm /home/user1-home user1 ', text: 'Same as above but also move the directory content '},
        { command : 'su user1 ', text: 'Switch user to user1. Notice: you need to supply user1’s password '},
        { command : 'su -l user1 ', text: 'Switch user to user1 and read /etc/profile, ~/.bashrc, ~/.bash_profile and ~/.bash_login (if the requested login shell is bash) '},
        { command : 'sudo su -l ', text: 'Become the superuser (root). Notice: you need to supply your password '},
        { command : 'sudo Command ', text: 'Execute a command as the superuser (root). Notice: you need to supply your password '},
        { command : 'sudo visudo ', text: 'edit the "Sudoers" file Notice: you need to supply your password'},
        { command : 'exit ', text: 'Exit from the current user. This will take you back to the last user. '},
    ],
    History:[
        { command : 'history ', text: 'List the last commands for the current user '},
        { command : '!n ', text: 'Re-execute command number n '},
        { command : '!n:p ', text: 'Print command number n to the stdout '},
        { command : 'sudo !! ', text: 'Re-execute the last command with sudo '},
    ],
    TextProcessing :[
        { command : 'cat file  ', text: 'View the content of file  '},
        { command : 'cat -n file  ', text: 'View the content of file including line numbers  '},
        { command : 'more file  ', text: 'Display the content of file from the first line. You can go down one line by pressing Enter or screen by hitting space. You can’t go up with more.'},
        { command : 'less file  ', text: 'Display the content of file from the first line. You can go one line up or down by using the arrow keys or one screen by using PgUp/PgDn. To search within less, use / followed by the requested pattern. To go to the next match, use n and to go to the previous match, use N  '},
        { command : 'head file  ', text: 'Print the first 10 lines of file  '},
        { command : 'head -n  ', text: 'Print only the first n lines of file (you can specify any number of lines)   '},
        { command : 'tail file  ', text: 'Print the last 10 line of file  '},
        { command : 'tail -n file  ', text: 'Print only the last n lines of file (you can specify any number of lines)    '},
        { command : 'tail -f file  ', text: 'Print the last 10 lines of file and watch for changes in real-time  '},
        { command : 'tail -f -n n file  ', text: 'Print only the last n lines of file and watch for changes in real-time. You can specify any number of lines including 0 for none – print only new lines.  '},
        { command : 'grep pattern file   ', text: 'Search for the pattern pattern in file. By default, grep prints the whole line(s) contain the requested pattern.  '},
        { command : 'grep -i pattern file  ', text: 'Search for the pattern pattern in file but ignore case-sensitive  '},
        { command : 'grep -v pattern file  ', text: 'Search for the pattern pattern in file but print non-matching lines (-v invertmatch)  '},
        { command : 'grep -A n 	pattern file  ', text: 'Search for the pattern pattern in file and print n lines after (you can specify any number of lines)  '},
        { command : 'grep -B n 	pattern file  ', text: 'Search for the pattern pattern in file and print n lines before (you can specify any number of lines)  '},
        { command : 'grep -w pattern file  ', text: 'Select only those lines containing matches that form whole  words. '},
        { command : 'grep -x pattern file  ', text: 'Select only those matches that exactly match the whole line. '},
        { command : 'grep -o pattern file  ', text: 'Print only the matched (non-empty) parts of a matching  line, with each such part on a separate output line. '},
        { command : 'grep -n pattern file ', text: 'Prefix each line of output with the 1-based line number  within its input file. '},
        { command : 'cut -d “d” file -f n file  ', text: 'Cut the lines in file by delimiter and prints field n. You can specify any delimiter as the cutting point but only one character (default is Tab). You can print more than one field by using comma (-f 1,3,5)  '},
        { command : 'cut -c n file  ', text: 'Cut the n character form every line in file. You also can specify a range n1-n2  '},
        { command : 'sort file  ', text: 'Sort the content of file by alphabet order  '},
        { command : 'sort -n file  ', text: 'Sort the content of file by numerical order  '},
        { command : 'sort -u file  ', text: 'Sort by alphabet and removing duplicates within a file named file  '},
        { command : 'sort -t “d” -k n file ', text: 'In similar to cut -t specify a field separator and -k option with an argument to indicate the field number '},
        { command : 'uniq file  ', text: 'Removes any duplicated lines from file - matching lines are merged to the first occurrence  '},
        { command : 'uniq -c file ', text: 'Prints unique lines preceded by the number of the times the line occurs   '},
    ],
    Regex:{
        Standard:[
            { command : '. (dot)', text: 'Any character except line break'},
            { command : '^ ', text: 'Beginning of the line. When [^] use for negation'},
            { command : '$ ', text: 'End of line'},
            { command : '[ ] ', text: ' Character set - one of the characters in the bracket'},
            { command : '[x-y] ', text: ' Character range - any character within the range from x to '},
            { command : '[^ab] ', text: 'negation - match any character except the set'},
            { command : '\ ', text: ' Backslash used for escaping '},
        ],
        Extended:[
            { command : '|', text: 'Alternation - OR operand '},
            { command : '( )', text: 'Contents of group'},
            { command: '* ', text: 'Match an element zero or more times'},
            { command: '? ', text: 'Match an element zero or one time'},
            { command: '+ ', text: 'Match an element one or more times'},
            { command: '{m1, m2} ', text: 'Match the preceding element if it occurs at least m1 times and no more than m2 times'},
            { command: 'grep -E', text: 'Use ERE standard in the grep argument'},
        ]
    },
    Searching:[
        { command : 'which ', text: 'small tool used for search for programs located'},
        { command : 'whereis -b', text: 'search only for binary  or executable files'},
        { command : 'whereis -m', text: 'search only for man pages '},
        { command : 'locate file', text: 'search for a file location'},
        { command : 'locate -b "\pattern"', text: 'Match only the base name against the specified patterns'},
        { command : 'find', text: 'powerful tool for searching for files and folders '},
        { command : 'find . -type f', text: 'Search only for files only, starting at current location.'},
        { command : 'find . -type d', text: 'Search only for directories, starting at the current location.'},
        { command : 'find . -name file.name', text: 'Search by name '},
        { command : 'find . –iname file.name', text: 'Search by name ignore later case (capital end lower case) '},
        { command : 'find /etc -maxdepth 1', text: 'limit find only to /etc, not including subdirectories. Higher number will search deeper in /etc '},
        { command : 'find /etc -mindepth 2', text: 'option to tell find search only in subdirectories'},
        { command : 'find -size -10M', text: 'search for files by size using'},
        { command : 'find -size +10M -size -500M', text: 'Search for files larger than 10M and smaller than 500M'},
        { command : 'find . -type f -empty', text: 'search for empty files'},
        { command : 'find -type f -mtime 1', text: 'search for files that have been modified in the last 24 hours'},
        { command : 'find -type f -mmin -40', text: 'mmin operator is the same as mtime but in minutes'},
        { command : 'find . -type f -cmin -3', text: 'ctime and cmin allow to search files that have been changed or that their attributes have been changed.'},
        { command : 'find . -type f -amin -2 ', text: 'search for files by access time - atime for days and amin for minutes.'},
        { command : 'find . -type f -user admin', text: 'search for files and by owner username'},
        { command : 'find . -type f -perm 644 ', text: 'search for files and by permissions, in this case: rw-r--r-- '},
        { command : 'find . -type f -perm /o=w', text: 'search for files and by permissions, in this case write permission for owner '},
        { command : 'find -print -exec file {} \;', text: 'search and run the file command on each of the matches '},
        { command : 'find . \( excretion1 \) -or \( excretion2 \) ', text: 'Using or operator in fin command. '},
    ],
    PackageManagement :{
        UpdateAndInstall:[
            { command : 'sudo apt update', text: 'Update the apt packges . The available packages indexes are fetched from the location(s) specified in /etc/apt/sources.list '},
            { command : 'sudo apt install <pkg_name>', text: 'Instal apt packeg '},
            { command : 'sudo yum check-update', text: ' check for any updates available for your installed packages'},
            { command : 'sudo yum update', text: 'Update RedHat-style systems packages'},
            { command : 'sudo yum install <pkg_name>', text: 'Install a new package in Red Hat-style systems using the high-level tool yum '},
        ],
        Search:[
            { command : 'dpkg -s <pkg_name>', text: 'Package status '},
            { command : 'rpm -q httpd', text: 'To check the status of a package on Red Hat-style systems, we can use the low-level tool rpm'},
            { command : 'apt search ', text: 'Debian-style search in the packages metadata '},
            { command : 'yum search', text: 'Red Hat-style search. yum info can be used also '},
            { command : 'sudo dpkg -l', text: 'List installed packages in Debian-style'},
            { command : 'rpm -qa', text: 'List installed packages in Red Hat, CentOS, and Fedora.'},

        ],
        Deletes:[
            { command : 'sudo apt remove', text: 'deletes the package without any configuration files that were installed '},
            { command : 'Sudo apt purge ', text: 'deletes the package and all the configuration files '},
            { command : 'sudo yum remove', text: 'In Red Hat-style, yum remove is not guaranteed to preserve configuration files.'},
            { command : 'sudo rmp -e <pkg_name> ', text: 'A low lavel tool that keep the configuration files '},
        ],
    },
    Processes:[
        { command : 'ps', text: 'most used command to examine runing processes have invoked from the current terminal'},
        { command : 'ps x', text: 'list all the processes belonging to the current user.'},
        { command : 'htop', text: 'htop is the more advantage version of the top command (note that you need to install it first).'},
        { command : '<process> &', text: 'To invoke a process as a background job'},
        { command : 'jobs  ', text: 'gives us a way to list all the jobs that have been invoked from the terminal, including background job'},
        { command : 'fg %1 ', text: 'bring the process to the foreground. %n is the job number'},
        { command : 'bg %1 ', text: 'restore the process as a foreground job like fg'},
    ],
    Kill:[
        { command : 'kill -<sig_num> <PID>', text: 'You can send a different signal with the kill command, you need to specify the number of the signal [1]'},
        { command : 'kill -2', text: 'Interrupt the process. This is the signal that you send when you press Ctrl + C in the terminal.'},
        { command : 'kill -15', text: 'This the default signal for the kill command. This signal will kill programs that still “alive” enough to receive signals.'},
        { command : 'kill -9', text: 'This signal is unique in the term that is not sent to the target process. The kernel immediately kills the process. Keep in mind that a program can handle signals in different ways, so in case you can’t terminate a program by sending INT or TERM signals, use the kill signal instead.'},
        { command : 'kill -18 ', text: 'Continue. If the process is in stop mode and receives a CONT signal, it will continue running as usual.'},
        { command : 'kill -19 ', text: 'Stop. This signal is the same signal that you issue when you press Ctrl + Z in a terminal. '},
        { command : 'killall -<signal_number> <program_name>', text: 'It’s also possible to send a signal to multiple instances of the same program using the killall command.  '},
    ],
    Systemctl:[
        { command : 'sudo systemctl start app', text: 'start a systemd service'},
        { command : 'sudo systemctl stop app', text: 'top a currently running service'},
        { command : 'sudo systemctl restart app', text: ' restart a running service'},
        { command : 'sudo systemctl enable app', text: 'start services automatically at boot'},
        { command : 'sudo systemctl disable app', text: 'disable the service from starting automatically '},
        { command : 'systemctl status application', text: 'check the status of a service '},
        { command : 'systemctl list-units', text: 'To see a list of all of the active units that systemd knows about '},
        { command : 'systemctl list-units --all --state=inactive', text: 'Lists all units and indicate the LOAD, ACTIVE, or SUB states that we wish to see (ex: all inactive units ) '},
        { command : 'systemctl list-units --type=service', text: 'tell systemctl to only display units of the type we are interested in. Ex:  only active service units, we can use'},
    ],
    Networking:{
        IPAndRoute:[
            { command : 'ip link ', text: 'control and get info about ethernet adapters (physical layer) '},
            { command : 'ip addr ', text: 'get information and setup layer three.'},
            { command : 'lshw -c network', text: 'provides details about the hardware, driver, and hardware capabilities'},
            { command : 'ip link set dev eht0 down (up)', text: 'disable (or enable ) the interface . Needed in order to configure a interface.'},
            { command : 'ip addr add 192.168.4.145/24 dev enp0s3', text: 'configure the network interface statically '},
            { command : 'ip route ', text: 'Shows routing table '},
            { command : 'ip route add default via 192.168.4.1 dev enp0s3', text: 'configure static and default routes'},
            { command : 'route add default gw 192.168.4.1', text: 'configure static and default routes '},
            { command : 'route add -net 172.31.0.0/29 gw q92.168.100.100 dev eth2', text: 'configure static route for a local network thru interface eth2'},
        ],
        Ifconfig:[
            { command : 'Ifconfig', text: ' '},
            { command : 'dhclient eht0', text: 'check the status of the interface '},
            { command : 'ifconfig enp0s3 down (up) ', text: 'disable (or enable ) the interface . Needed in order to configure a interface. '},
            { command : 'ifdown ens33 / ifup ins33 ', text: 'disable (or enable ) the interface . Needed in order to configure a interface. '},
            { command : 'ifconfig enp0s3 192.168.4.145 netmask 255.255.255.0', text: 'configure the network interface statically '},
        ],
        NetstatAndARP:[
            { command : 'netstat -lntp', text: 'View only TCP sockets in listening mode'},
            { command : 'netstat -r ', text: 'View the routing table using netstat.'},
            { command : ' arp -a', text: 'list with all the systems that we have been talking to recently. '},
            { command : 'arp -d 192.168.4.100', text: 'delete an ARP record'},
        ],
    },
}


export default cheatSheet